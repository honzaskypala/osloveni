configs = {
    "java" :
        {
            "filename"             : "Osloveni",
            "filesuffix"           : ".java",
            "fileend"              : "    public static String capitalize(String text) {\n        if (text.isEmpty()) {\n            return text;\n        }\n        return text.substring(0, 1).toUpperCase() + text.substring(1);\n    }\n\n}",
            "commentstart"         : "/*",
            "commentend"           : "*/",
            "indent"               : "    ",
            "blockstart"           : "{",
            "blockend"             : "}",
            "function"             : "public static String {fnname}(String {var}) {{",
            "functionend"          : "}",
            "var"                  : "{varname}",
            "vardeclaration"       : "{type} {var};",
            "vartypechar"          : "char",
            "vartypestring"        : "String",
            "vartypestrtuple"      : "String[]",
            "tupleindex"           : "[{index}]",
            "if"                   : "if ({cond}) {{",
            "elseif"               : "}} else if ({cond}) {{",
            "else"                 : "} else {",
            "endif"                : "}",
            "switch"               : "switch ({var}) {{",
            "endswitch"            : "}",
            "case"                 : "case {exp}:",
            "endcase"              : "\tbreak;",
            "default"              : "default:",
            "assignement"          : "{var} = {exp};",
            "conditional"          : "({cond}) ? {exp1} : {exp2}",
            "equal"                : "{exp1} == {exp2}",
            "and"                  : "{exp1} && {exp2}",
            "or"                   : "{exp1} || {exp2}",
            "charquote"            : "'",
            "strquote"             : "\"",
            "return"               : "return {exp};",
            "charatpos"            : "{var}.charAt({pos})",
            "strlen"               : "{var}.length()",
            "leftstr"              : "{var}.substring(0, {length})",
            "rightstr"             : "{var}.substring({var}.length() - {length})",
            "lowercase"            : "{var}.toLowerCase()",
            "uppercase"            : "{var}.toUpperCase()",
            "titlecase"            : "capitalize({var})",
            "islowercase"          : "String.valueOf({var}).toLowerCase().equals({var})",
            "isuppercase"          : "String.valueOf({var}).toUpperCase().equals({var})",
            "istitlecase"          : "{var}.matches(\"^[A-ZÁČĎÉÍŇÓŘŠŤÚÝŽ][a-záčďéěíňóřšťúůýž]*$\")",
            "concat"               : "{str1} + {str2}",
            "tuple"                : "new String[]{{{exp1}, {exp2}}}",
            "strnegativepos"       : False,
            "fetchcharoptimization": True,
            "funcdoc"              : "/**\n * Vrací pátý pád jména k prvnímu pádu\n * @param {String} jmeno první pád jména\n */\npublic class Osloveni {\n",
            "docinsidefunction"    : False,
        },
    "python" :
        {
            "filesuffix"           : ".py",
            "commentstart"         : "'''",
            "commentend"           : "'''",
            "indent"               : "    ",
            "blockstart"           : "",
            "blockend"             : "",
            "function"             : "def {fnname}({var}):",
            "var"                  : "{varname}",
            "tupleindex"           : "[{index}]",
            "if"                   : "if {cond}:",
            "elseif"               : "elif {cond}:",
            "else"                 : "else:",
            "assignement"          : "{var} = {exp}",
            "conditional"          : "{exp1} if {cond} else {exp2}",
            "equal"                : "{exp1} == {exp2}",
            "and"                  : "{exp1} and {exp2}",
            "or"                   : "{exp1} or {exp2}",
            "charquote"            : "'",
            "strquote"             : "'",
            "return"               : "return {exp}",
            "charatpos"            : "{var}[{pos}]",
            "leftstr"              : "{var}[:{length}]",
            "rightstr"             : "{var}[-{length}:]",
            "lowercase"            : "{var}.lower()",
            "uppercase"            : "{var}.upper()",
            "titlecase"            : "{var}.title()",
            "islowercase"          : "{var}.islower()",
            "isuppercase"          : "{var}.isupper()",
            "istitlecase"          : "{var}.istitle()",
            "concat"               : "{str1} + {str2}",
            "tuple"                : "({exp1}, {exp2})",
            "strlen"               : "len({var})",
            "strnegativepos"       : True,
            "fetchcharoptimization": True,
            "funcdoc"              : "\"\"\"Vrací pátý pád jména k prvnímu pádu\n\nArgumenty:\njmeno -- první pád jména\n\"\"\"",
            "docinsidefunction"    : True,
        },
    "php" :
        {
            "filesuffix"           : ".php",
            "filestart"            : "<?php",
            "fileend"              : "?>",
            "commentstart"         : "/*",
            "commentend"           : "*/",
            "indent"               : "\t",
            "blockstart"           : "{",
            "blockend"             : "}",
            "function"             : "function {fnname}({var}) {{",
            "functionend"          : "}",
            "var"                  : "${varname}",
            "tupleindex"           : "[{index}]",
            "if"                   : "if ({cond}) {{",
            "elseif"               : "}} elseif ({cond}) {{",
            "else"                 : "} else {",
            "endif"                : "}",
            "switch"               : "switch ({var}) {{",
            "endswitch"            : "}",
            "case"                 : "case {exp}:",
            "endcase"              : "\tbreak;",
            "default"              : "default:",
            "assignement"          : "{var} = {exp};",
            "conditional"          : "{cond} ? {exp1} : {exp2}",
            "equal"                : "{exp1} == {exp2}",
            "and"                  : "{exp1} && {exp2}",
            "or"                   : "{exp1} || {exp2}",
            "charquote"            : "'",
            "strquote"             : "\"",
            "return"               : "return {exp};",
            "charatpos"            : "mb_substr({var}, {pos}, 1)",
            "strlen"               : "mb_strlen({var})",
            "leftstr"              : "mb_substr({var}, 0, {length})",
            "rightstr"             : "mb_substr({var}, -{length})",
            "lowercase"            : "mb_convert_case({var}, MB_CASE_LOWER, \"UTF-8\")",
            "uppercase"            : "mb_convert_case({var}, MB_CASE_UPPER, \"UTF-8\")",
            "titlecase"            : "mb_convert_case({var}, MB_CASE_TITLE, \"UTF-8\")",
            "islowercase"          : "preg_match(\"/^[a-záčďéěíňóřšťţúůýž]+$/u\", {var})",
            "isuppercase"          : "preg_match(\"/^[A-ZÁČĎÉÍŇÓŘŠŤÚÝŽ]+$/u\", {var})",
            "istitlecase"          : "preg_match(\"/^[A-ZÁČĎÉÍŇÓŘŠŤÚÝŽ][a-záčďéěíňóřšťţúůýž]*$/u\", {var})",
            "concat"               : "{str1} . {str2}",
            "tuple"                : "[{exp1}, {exp2}]",
            # "tuple"                : "array({exp1}, {exp2})",   # PHP < 5.4
            "strnegativepos"       : True,
            "fetchcharoptimization": True,
            "funcdoc"              : "/**\n * Vrací pátý pád jména k prvnímu pádu\n * @param string $jmeno první pád jména\n*/",
            "docinsidefunction"    : False,
        },
    "javascript" :
        {
            "filesuffix"           : ".js",
            "fileend"              : "\nif (typeof module !== 'undefined' && module.exports) {\n\tmodule.exports = { osloveni }; // if running in Node.js → export the function to public\n}",
            "commentstart"         : "/*",
            "commentend"           : "*/",
            "indent"               : "\t",
            "blockstart"           : "{",
            "blockend"             : "}",
            "function"             : "function {fnname}({var}) {{",
            "functionend"          : "}",
            "var"                  : "{varname}",
            "vardeclaration"       : "var {var};",
            "tupleindex"           : "[{index}]",
            "if"                   : "if ({cond}) {{",
            "elseif"               : "}} else if ({cond}) {{",
            "else"                 : "} else {",
            "endif"                : "}",
            "switch"               : "switch ({var}) {{",
            "endswitch"            : "}",
            "case"                 : "case {exp}:",
            "endcase"              : "\tbreak;",
            "default"              : "default:",
            "assignement"          : "{var} = {exp};",
            "conditional"          : "{cond} ? {exp1} : {exp2}",
            "equal"                : "{exp1} == {exp2}",
            "and"                  : "{exp1} && {exp2}",
            "or"                   : "{exp1} || {exp2}",
            "charquote"            : "'",
            "strquote"             : "\"",
            "return"               : "return {exp};",
            "charatpos"            : "{var}.charAt({pos})",
            "strlen"               : "{var}.length",
            "leftstr"              : "{var}.substring(0, {length})",
            "rightstr"             : "{var}.substring({var}.length - {length})",
            "lowercase"            : "{var}.toLowerCase()",
            "uppercase"            : "{var}.toUpperCase()",
            "titlecase"            : "{var}.replace(/\w\S*/g, function(txt){{return txt.charAt(0).toUpperCase() + txt.substring(1).toLowerCase();}})",
            "islowercase"          : "{var}.toLowerCase() == {var}",
            "isuppercase"          : "{var}.toUpperCase() == {var}",
            "istitlecase"          : "{var}.match(/^[A-ZÁČĎÉÍŇÓŘŠŤÚÝŽ][a-záčďéěíňóřšťúůýž]*$/u)",
            "concat"               : "{str1} + {str2}",
            "tuple"                : "[{exp1}, {exp2}]",
            "strnegativepos"       : False,
            "fetchcharoptimization": True,
            "funcdoc"              : "/**\n * Vrací pátý pád jména k prvnímu pádu\n * @param {String} jmeno první pád jména\n*/",
            "docinsidefunction"    : False,
        },
    "micropython" :
        {
            "filesuffix"           : ".py",
            "commentstart"         : "'''",
            "commentend"           : "'''",
            "indent"               : "    ",
            "blockstart"           : "",
            "blockend"             : "",
            "function"             : "def {fnname}({var}):",
            "var"                  : "{varname}",
            "tupleindex"           : "[{index}]",
            "if"                   : "if {cond}:",
            "elseif"               : "elif {cond}:",
            "else"                 : "else:",
            "assignement"          : "{var} = {exp}",
            "conditional"          : "{exp1} if {cond} else {exp2}",
            "equal"                : "{exp1} == {exp2}",
            "and"                  : "{exp1} and {exp2}",
            "or"                   : "{exp1} or {exp2}",
            "charquote"            : "'",
            "strquote"             : "'",
            "return"               : "return {exp}",
            "charatpos"            : "{var}[{pos}]",
            "leftstr"              : "{var}[:{length}]",
            "rightstr"             : "{var}[-{length}:]",
            "lowercase"            : "{var}.lower()",
            "uppercase"            : "{var}.upper()",
            "titlecase"            : "{var}[0].upper() + {var}[1:].lower()",
            "islowercase"          : "{var}.islower()",
            "isuppercase"          : "{var}.isupper()",
            "istitlecase"          : "{var}[0].isupper() and {var}[1:].islower()",
            "concat"               : "{str1} + {str2}",
            "tuple"                : "({exp1}, {exp2})",
            "strlen"               : "len({var})",
            "strnegativepos"       : True,
            "fetchcharoptimization": True,
            "funcdoc"              : "\"\"\"Vrací pátý pád jména k prvnímu pádu\n\nArgumenty:\njmeno -- první pád jména\n\"\"\"",
            "docinsidefunction"    : True,
        },
    "swift" :
        {
            "filesuffix"           : ".swift",
            "filestart"            : "import Foundation\n",
            "commentstart"         : "/*",
            "commentend"           : "*/",
            "indent"               : "    ",
            "blockstart"           : "{",
            "blockend"             : "}",
            "function"             : "public func {fnname}(_ {var}: String) -> String {{",
            "functionend"          : "}",
            "var"                  : "{varname}",
            "vardeclaration"       : "var {var}: {type}",
            "vartypestring"        : "String",
            "vartypestrtuple"      : "(String, String)",
            "tupleindex"           : ".{index}",
            "if"                   : "if {cond} {{",
            "elseif"               : "}} else if {cond} {{",
            "else"                 : "} else {",
            "endif"                : "}",
            "switch"               : "switch {var} {{",
            "endswitch"            : "}",
            "case"                 : "case {exp}:",
            "casemultiseparator"   : ", ",
            "default"              : "default:",
            "assignement"          : "{var} = {exp}",
            "conditional"          : "{cond} ? {exp1} : {exp2}",
            "equal"                : "{exp1} == {exp2}",
            "and"                  : "{exp1} && {exp2}",
            "or"                   : "{exp1} || {exp2}",
            "charquote"            : "\"",
            "strquote"             : "\"",
            "return"               : "return {exp}",
            "charatpos"            : "String(Array({var})[{pos}])",
            "strlen"               : "{var}.count",
            "leftstr"              : "String({var}.prefix({length}))",
            "rightstr"             : "String({var}.suffix({length}))",
            "lowercase"            : "{var}.lowercased()",
            "uppercase"            : "{var}.uppercased()",
            "titlecase"            : "{var}.capitalized",
            "islowercase"          : "{var}.lowercased() == {var}",
            "isuppercase"          : "{var}.uppercased() == {var}",
            "istitlecase"          : "{var}.capitalized == {var}",
            "concat"               : "{str1} + {str2}",
            "tuple"                : "({exp1}, {exp2})",
            "strnegativepos"       : False,
            "fetchcharoptimization": True,
            "funcdoc"              : "/// Vrací pátý pád jména k prvnímu pádu\n///\n/// - Parameters:\n///     - jmeno: první pád jména.",
            "docinsidefunction"    : False,
        },
}
